// tslint:disable
import { NO_ERRORS_SCHEMA } from '@angular/core';
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
<% for(var dep in depsVariables) { -%>
import { of } from 'rxjs/observable/of';
<% break; } -%>
<% if(useMockito) { -%>
import { mock } from 'ts-mockito';
<% } -%>

<% for(var key in imports) { -%>
import {<%- imports[key].map(el => `${el}`).join(', ') -%>} from '<%- key -%>';
<% } -%>

// --------------- CONFIGURATION - START -------------------//
// MOCKED METHODS RETURNS
// The mocks of methods returns below are used with spies. Please, change it as you desire.
<% for(var dep in depsVariables) { 
    if(depsVariables[dep].injected) continue; -%>
<% depsVariables[dep].methods.forEach((usedMethod) => { -%>
const <%-dep%>_<%-usedMethod%> = of({});
<% }); -%>
<% } -%>

// MOCKED INJECTED DEPENDENCES
// The mocks of dependencies that can't be mocked with mockito. Please, change as needed.
<% for(var dep in depsVariables) { 
    if(!depsVariables[dep].injected) continue; -%>
const <%-dep%>Mock = {
<% depsVariables[dep].methods.forEach((usedMethod) => { -%>
  <%-usedMethod%>: () => {},
<% }); -%>
};
<% } -%>

// PARAMETERS USED WITH METHODS
// This is the parameters values used in tests. Please, change as needed.
<% for(var method in defaultParameters) { var params = defaultParameters[method]; -%>
<% for(var index in params.names) { -%>
const <%-method%>_<%-params.names[index]%>: <%-params.types[index]%> = <%-params.values[index]%>;
<% } -%>
<% } -%>
// --------------- CONFIGURATION - END --------------------//

describe('<%= className %>', () => {
<% for(var dep in depsVariables) { -%>
  let <%-dep%>: <%- depsVariables[dep].type %>;
<% } -%>
  let component: <%= className %>;
  let fixture: ComponentFixture<%-minorSig%>typeof component<%-majorSig%>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        <%= className %>
      ],
      providers: [<% for(var key in providers) { %>
        <%- providers[key]+ ',' %><% } %>
      ],
      schemas: [
        NO_ERRORS_SCHEMA,
      ],
    })
    .compileComponents();
  }));

  beforeEach(() => {
<% for(var dep in depsVariables) { -%>
    <%-dep%> = TestBed.get(<%- depsVariables[dep].testBed %>);
<% } -%>
    fixture = TestBed.createComponent(<%= className %>);
    component = fixture.componentInstance;
  });

  it("should be created", async(() => {
    expect(component).toBeTruthy();
  }));

<% for(var prop in initialProperties) { 
    if(initialProperties[prop].private || !initialProperties[prop]['value']) continue; -%>
  it("[<%-prop%>] should be initialized with value <%-initialProperties[prop].value%>.", async(() => {
    expect(component.<%-prop%>).toBe(<%-initialProperties[prop].value%>);
  }));
<% } -%>
<% for(var method in depsUsage) {
    var propConditions = [];
    conditions[method]
      .filter(cond => (cond['variable'] && !initialProperties[cond['variable']].private))
      .forEach((cond) => {
        propConditions.push({...cond, value: true});
        propConditions.push({...cond, value: false});
    });
    if(!propConditions.length) propConditions = [{}]; -%>

<% propConditions.forEach(cond => { 
  var msg = `[${method}] should runs without errors and uses its dependencies`;
  msg += (cond['variable']) ? ` setting ${cond.variable} = ${cond.value}` : ''; -%> 
  it("<%-msg%>", () => {
<% for(var dep in depsUsage[method]) { -%>
<% depsUsage[method][dep].forEach((usedMethod) => { -%>
<% if(!usedMethod.conditions.length) { -%>
<% if(depsVariables[dep].injected) { -%>
    let <%-usedMethod.method %>Spy = spyOn(<%-dep%>, '<%-usedMethod.method %>');
<% } else { -%>
    let <%-usedMethod.method %>Spy = spyOn(<%-dep%>, '<%-usedMethod.method %>')
      .and.returnValue(<%-dep%>_<%-usedMethod.method%>);
<% } -%>
<% } -%>
<% }); -%>
<% } -%>
<% if(cond['variable']) { -%>
    component.<%-cond.variable%> = <%-cond.value%>;    
<% } -%>
    component.<%-method %>(<%-
      (defaultParameters[method].names.length) ?
      method+"_"+defaultParameters[method].names.join(','+method+"_") :
      ''
    -%>);
    
    fixture.detectChanges();
<% for(var dep in depsUsage[method]) { -%>
<% depsUsage[method][dep].forEach((usedMethod) => { -%>
<% if(!usedMethod.conditions.length) { -%>
    expect(<%-usedMethod.method %>Spy).toHaveBeenCalled();
<% } -%>
<% }); -%>
<% } -%>
  });
<% }); -%>
<% } -%>

});
