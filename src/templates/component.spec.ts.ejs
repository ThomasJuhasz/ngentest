// tslint:disable
import { NO_ERRORS_SCHEMA } from '@angular/core';
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
<% for(var dep in depsVariables) { -%>
import { of } from 'rxjs/observable/of';
<% break; } -%>
<% if(useMockito) { -%>
import { mock } from 'ts-mockito';
<% } -%>

<% for(var key in imports) { -%>
import {<%- imports[key].map(el => `${el}`).join(', ') -%>} from '<%- key -%>';
<% } -%>
<%-                        -%>
<% for(var key in mocks) { -%>
<%- mocks[key] -%>
<% } -%>

describe('<%= className %>', () => {
<% for(var dep in depsVariables) { -%>
  let <%-dep%>: <%- depsVariables[dep].type %>;
<% } -%>
  let component: <%= className %>;
  let fixture: ComponentFixture<%-minorSig%>typeof component<%-majorSig%>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        <%= className %>
      ],
      providers: [<% for(var key in providers) { %>
        <%- providers[key]+ ',' %><% } %>
      ],
      schemas: [
        NO_ERRORS_SCHEMA,
      ],
    })
    .compileComponents();
  }));

  beforeEach(() => {
<% for(var dep in depsVariables) { -%>
    <%-dep%> = TestBed.get(<%- depsVariables[dep].testBed %>);
<% } -%>
    fixture = TestBed.createComponent(<%= className %>);
    component = fixture.componentInstance;
  });

  it('should create a component', async(() => {
    expect(component).toBeTruthy();
  }));

<% for(var method in depsUsage) { -%>

  it('[<%-method %>] should runs without errors and uses its dependencies.', () => {
<% for(var dep in depsUsage[method]) { -%>
<% depsUsage[method][dep].forEach((usedMethod) => { -%>
<% if(!usedMethod.conditions.length) { -%>
    let <%-usedMethod.method %>Spy = spyOn(<%-dep%>, '<%-usedMethod.method %>').and.returnValue(of({}));
<% } -%>
<% }); -%>
<% } -%>
    component.<%-method %>();
    
    fixture.detectChanges();
<% for(var dep in depsUsage[method]) { -%>
<% depsUsage[method][dep].forEach((usedMethod) => { -%>
<% if(!usedMethod.conditions.length) { -%>
    expect(<%-usedMethod.method %>Spy).toHaveBeenCalled();
<% } -%>
<% }); -%>
<% } -%>
  });
<% } -%>

});
