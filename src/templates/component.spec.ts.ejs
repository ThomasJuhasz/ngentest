<% // DECLARATIONS
const primitiveTypes = ["Array", "number", "string", "boolean"];
%>
// tslint:disable
<% // IMPORTS
%>
import { NO_ERRORS_SCHEMA } from '@angular/core';
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
<% for(var dep in depsVariables) { -%>
import { of } from 'rxjs/observable/of';
<% break; } -%>
<% if(useThrow) { -%>
import { _throw } from 'rxjs/observable/throw';
<% } -%>
<% if(useMockito) { -%>
import { mock } from 'ts-mockito';
<% } -%>

<% for(var key in imports) { -%>
import {<%- imports[key].map(el => `${el}`).join(', ') -%>} from '<%- key -%>';
<% } -%>

<% // MOCKS AREA
%>
// MOCKS FOR INJECTED DEPENDENCES
// The mocks of dependencies that can't be mocked with mockito is putted here. Please, change as needed.
<% for(var dep in depsVariables) { 
    if(!depsVariables[dep].injected) continue; -%>
const <%-dep%>Mock = {
<% console.log(depsVariables); depsVariables[dep].methods.forEach((usedMethod) => { -%>
  <%-usedMethod%>: () => {},
<% }); -%>
};
<% } -%>
// ------------------------------

describe('<%= className %>', () => {
<% for(var dep in depsVariables) { -%>
  let <%-dep%>: <%- depsVariables[dep].type %>;
<% } -%>
  let component: <%= className %>;
  let fixture: ComponentFixture<%-minorSig%>typeof component<%-majorSig%>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        <%= className %>
      ],
      providers: [<% for(var key in providers) { %>
        <%- providers[key]+ ',' %><% } %>
      ],
      schemas: [
        NO_ERRORS_SCHEMA,
      ],
    })
    .compileComponents();
  }));

  beforeEach(() => {
<% for(var dep in depsVariables) { -%>
    <%-dep%> = TestBed.get(<%- depsVariables[dep].testBed %>);
<% } -%>
    fixture = TestBed.createComponent(<%= className %>);
    component = fixture.componentInstance;
  });
<% // TESTING THE CREATION OF THE COMPONENT 
%>
  it("should be created", async(() => {
    expect(component).toBeTruthy();
  }));

<% // TESTING THE CORRECT INITIALIZATION OF THE PROPERTIES 
%>
<% for(var prop in initialProperties) { 
    if(initialProperties[prop].private || 
       !initialProperties[prop]['value']) continue; -%>
  it("[<%-prop%>] should be initialized with value <%-initialProperties[prop].value%>.", async(() => {
    expect(component.<%-prop%>)<%-
      (initialProperties[prop].value.indexOf("new") === 0 ||
       initialProperties[prop].value.indexOf("[") === 0 ||
       initialProperties[prop].value.indexOf("{") === 0) ?
      '.not.toBeUndefined(' :
      '.toBe('+initialProperties[prop].value
    %>);
  }));
<% } -%>
<% // TESTING THE CORRECT CALLS OF THE DEPENDENCIES METHODS 
%>
<% for(var method in depsUsage) { -%>

  it('[<%-method %>] should runs without errors and uses its dependencies.', () => {
<% for(var dep in depsUsage[method]) { -%>
<% depsUsage[method][dep].forEach((usedMethod) => { -%>
<% if(!usedMethod.conditions.length) { -%>
<% if(depsVariables[dep].injected) { -%>
    let <%-usedMethod.method %>Spy = spyOn(<%-dep%>, '<%-usedMethod.method %>');
<% } else { -%>
    let <%-usedMethod.method %>Spy = spyOn(<%-dep%>, '<%-usedMethod.method %>')
      // TODO: Change the return of <%-usedMethod.method %> method here if needed.
      .and.returnValue(of({}));
<% } -%>
<% } -%>
<% }); -%>
<% } -%>
<% var params = defaultParameters[method]; -%>
<% if(params.names.length) { %>
    // TODO: Change the parameters values here if needed.
<% } -%>
<% for(var index in params.names) { -%>
    const <%-params.names[index]%>: <%-params.types[index]%> = <%-params.values[index]%>;
<% } -%>
    component.<%-method %>(<%-
      (params.names.length) ?
        params.names.join(', ') :
        ''
    -%>);
    
    fixture.detectChanges();
<% for(var dep in depsUsage[method]) { -%>
<% depsUsage[method][dep].forEach((usedMethod) => { -%>
<% if(!usedMethod.conditions.length) { -%>
    expect(<%-usedMethod.method %>Spy).toHaveBeenCalled();
<% } -%>
<% }); -%>
<% } -%>
    // TODO: Please put expectentions here, if needed.
  });
<% } -%>
<% // TESTING THE ERROR CATCHING AND PUTING THE MESSAGE ON component.error 
%>
<% for(var method in depsDirectUsage) { -%>
<% for(var dep in depsDirectUsage[method]) { -%>
<% depsDirectUsage[method][dep].forEach((usedMethod) => { 
  if(!usedMethod['errorMessage'] || usedMethod.conditions.length) return; 
  var params = defaultParameters[method]; -%>

  it('[<%-method %>] should set error message when <%-dep%>.<%-usedMethod.method%> throws an error.', () => {
    spyOn(<%-dep%>, '<%-usedMethod.method %>').and.returnValue(_throw({}));
    
<% for(var index in params.names) { -%>
    const <%-params.names[index]%>: <%-params.types[index]%> = <%-params.values[index]%>;
<% } -%>
    component.<%-method %>(<%-
      (params.names.length) ?
        params.names.join(', ') :
        ''
    -%>);

    expect(component.error).toBe('<%-usedMethod.errorMessage%>');
  });
<% }); -%>
<% } -%>
<% } -%>

});
